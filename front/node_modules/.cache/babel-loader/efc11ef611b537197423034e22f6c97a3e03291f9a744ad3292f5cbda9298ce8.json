{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shang\\\\Desktop\\\\front\\\\src\\\\DataTable.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Table, Spinner, Alert } from \"react-bootstrap\";\nimport { parseISO, format } from \"date-fns\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataTable = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Функция для загрузки данных\n  const fetchData = () => {\n    axios.get(\"http://localhost:8080/v1/containers/\").then(response => {\n      setData(response.data);\n      setError(null); // Сброс ошибки, если данные успешно загружены\n    }).catch(error => {\n      setError(\"Ошибка загрузки данных\");\n      console.error(error);\n    }).finally(() => setLoading(false));\n  };\n  useEffect(() => {\n    // Загружаем данные сразу при монтировании компонента\n    fetchData();\n\n    // Устанавливаем интервал для обновления данных каждые 10 секунд\n    const intervalId = setInterval(fetchData, 10000);\n\n    // Очистка интервала при размонтировании компонента\n    return () => clearInterval(intervalId);\n  }, []); // Пустой массив зависимостей, чтобы эффект выполнялся только при монтировании и размонтировании\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0421\\u0442\\u0430\\u0442\\u0438\\u0441\\u0442\\u0438\\u043A\\u0430 \\u043F\\u0438\\u043D\\u0433\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this), !loading && !error && /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"IP-\\u0430\\u0434\\u0440\\u0435\\u0441\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u0412\\u0440\\u0435\\u043C\\u044F \\u043F\\u0438\\u043D\\u0433\\u0430 (\\u043C\\u0441)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u041F\\u043E\\u0441\\u043B\\u0435\\u0434\\u043D\\u0438\\u0439 \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u044B\\u0439 \\u043F\\u0438\\u043D\\u0433\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.ip\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [item.ping_time, \" \\u043C\\u0441\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.last_successful ? format(parseISO(item.last_successful), \"dd.MM.yyyy\") : \"Нет данных\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this)]\n        }, item.ip, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(DataTable, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");\n_c = DataTable;\nexport default DataTable;\nvar _c;\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"names":["React","useEffect","useState","Table","Spinner","Alert","parseISO","format","axios","jsxDEV","_jsxDEV","DataTable","_s","data","setData","loading","setLoading","error","setError","fetchData","get","then","response","catch","console","finally","intervalId","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","animation","variant","striped","bordered","hover","map","item","ip","ping_time","last_successful","_c","$RefreshReg$"],"sources":["C:/Users/shang/Desktop/front/src/DataTable.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Table, Spinner, Alert } from \"react-bootstrap\";\r\nimport { parseISO, format } from \"date-fns\";\r\nimport axios from \"axios\";\r\n\r\ninterface DataType {\r\n  ip: string;  // Первичный ключ\r\n  ping_time: number;  // Время пинга в мс\r\n  last_successful: string;  // Дата последнего успешного пинга\r\n}\r\n\r\nconst DataTable: React.FC = () => {\r\n  const [data, setData] = useState<DataType[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Функция для загрузки данных\r\n  const fetchData = () => {\r\n    axios.get(\"http://localhost:8080/v1/containers/\")\r\n      .then(response => {\r\n        setData(response.data);\r\n        setError(null); // Сброс ошибки, если данные успешно загружены\r\n      })\r\n      .catch(error => {\r\n        setError(\"Ошибка загрузки данных\");\r\n        console.error(error);\r\n      })\r\n      .finally(() => setLoading(false));\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Загружаем данные сразу при монтировании компонента\r\n    fetchData();\r\n\r\n    // Устанавливаем интервал для обновления данных каждые 10 секунд\r\n    const intervalId = setInterval(fetchData, 10000);\r\n\r\n    // Очистка интервала при размонтировании компонента\r\n    return () => clearInterval(intervalId);\r\n  }, []); // Пустой массив зависимостей, чтобы эффект выполнялся только при монтировании и размонтировании\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <h2>Статистика пинга</h2>\r\n      {loading && <Spinner animation=\"border\" />}\r\n      {error && <Alert variant=\"danger\">{error}</Alert>}\r\n      {!loading && !error && (\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th>IP-адрес</th>\r\n              <th>Время пинга (мс)</th>\r\n              <th>Последний успешный пинг</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.map((item) => (\r\n              <tr key={item.ip}>\r\n                <td>{item.ip}</td>\r\n                <td>{item.ping_time} мс</td>\r\n                <td>\r\n                  {item.last_successful\r\n                    ? format(parseISO(item.last_successful), \"dd.MM.yyyy\")\r\n                    : \"Нет данных\"}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataTable;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,KAAK,EAAEC,OAAO,EAAEC,KAAK,QAAQ,iBAAiB;AACvD,SAASC,QAAQ,EAAEC,MAAM,QAAQ,UAAU;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ1B,MAAMC,SAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAa,EAAE,CAAC;EAChD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAgB,IAAI,CAAC;;EAEvD;EACA,MAAMiB,SAAS,GAAGA,CAAA,KAAM;IACtBX,KAAK,CAACY,GAAG,CAAC,sCAAsC,CAAC,CAC9CC,IAAI,CAACC,QAAQ,IAAI;MAChBR,OAAO,CAACQ,QAAQ,CAACT,IAAI,CAAC;MACtBK,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CACDK,KAAK,CAACN,KAAK,IAAI;MACdC,QAAQ,CAAC,wBAAwB,CAAC;MAClCM,OAAO,CAACP,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC,CACDQ,OAAO,CAAC,MAAMT,UAAU,CAAC,KAAK,CAAC,CAAC;EACrC,CAAC;EAEDf,SAAS,CAAC,MAAM;IACd;IACAkB,SAAS,CAAC,CAAC;;IAEX;IACA,MAAMO,UAAU,GAAGC,WAAW,CAACR,SAAS,EAAE,KAAK,CAAC;;IAEhD;IACA,OAAO,MAAMS,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEhB,OAAA;IAAKmB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BpB,OAAA;MAAAoB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACxBnB,OAAO,iBAAIL,OAAA,CAACN,OAAO;MAAC+B,SAAS,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACzCjB,KAAK,iBAAIP,OAAA,CAACL,KAAK;MAAC+B,OAAO,EAAC,QAAQ;MAAAN,QAAA,EAAEb;IAAK;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAChD,CAACnB,OAAO,IAAI,CAACE,KAAK,iBACjBP,OAAA,CAACP,KAAK;MAACkC,OAAO;MAACC,QAAQ;MAACC,KAAK;MAAAT,QAAA,gBAC3BpB,OAAA;QAAAoB,QAAA,eACEpB,OAAA;UAAAoB,QAAA,gBACEpB,OAAA;YAAAoB,QAAA,EAAI;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACjBxB,OAAA;YAAAoB,QAAA,EAAI;UAAgB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACzBxB,OAAA;YAAAoB,QAAA,EAAI;UAAuB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACRxB,OAAA;QAAAoB,QAAA,EACGjB,IAAI,CAAC2B,GAAG,CAAEC,IAAI,iBACb/B,OAAA;UAAAoB,QAAA,gBACEpB,OAAA;YAAAoB,QAAA,EAAKW,IAAI,CAACC;UAAE;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAClBxB,OAAA;YAAAoB,QAAA,GAAKW,IAAI,CAACE,SAAS,EAAC,eAAG;UAAA;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC5BxB,OAAA;YAAAoB,QAAA,EACGW,IAAI,CAACG,eAAe,GACjBrC,MAAM,CAACD,QAAQ,CAACmC,IAAI,CAACG,eAAe,CAAC,EAAE,YAAY,CAAC,GACpD;UAAY;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACd,CAAC;QAAA,GAPEO,IAAI,CAACC,EAAE;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQZ,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACtB,EAAA,CA7DID,SAAmB;AAAAkC,EAAA,GAAnBlC,SAAmB;AA+DzB,eAAeA,SAAS;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}